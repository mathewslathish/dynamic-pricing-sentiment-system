# Docker Compose Configuration for Dynamic Pricing & Sentiment Analysis System
# This file orchestrates the deployment of the application with all necessary services

version: '3.8'

services:
  # Main Application Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dynamic-pricing-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - API_PORT=5000
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount data directory for persistence
      - ./data:/app/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache Service (Optional - for caching sentiment analysis results)
  redis:
    image: redis:7-alpine
    container_name: dynamic-pricing-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Optional - for storing pricing history)
  # Uncomment if you need persistent database storage
  # db:
  #   image: postgres:15-alpine
  #   container_name: dynamic-pricing-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=pricing_system
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=changeme123
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U admin"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Nginx Reverse Proxy (Optional - for production deployment)
  # Uncomment if you want to use Nginx as a reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: dynamic-pricing-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - api
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  # postgres-data:
  #   driver: local
