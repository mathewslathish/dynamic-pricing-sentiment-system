# CI/CD Pipeline for Dynamic Pricing & Sentiment Analysis System
# This workflow handles automated testing, linting, security scanning, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Black formatter check
      run: |
        black --check .
      continue-on-error: true
    
    - name: Run isort check
      run: |
        isort --check-only .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run pylint
      run: |
        pylint **/*.py --exit-zero
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        if [ -f requirements.txt ]; then safety check -r requirements.txt; fi
      continue-on-error: true

  # Job 3: Unit & Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create test directory if not exists
      run: |
        mkdir -p tests
        if [ ! -f tests/__init__.py ]; then touch tests/__init__.py; fi
    
    - name: Run tests with pytest
      run: |
        if [ -d tests ] && [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        else
          echo "No tests found, skipping test execution"
        fi
      continue-on-error: true
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
      continue-on-error: true

  # Job 4: Build & Validate
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Validate Python files
      run: |
        python -m py_compile api_server.py
        python -m py_compile dynamic_pricing_model.py
        python -m py_compile sentiment_analysis.py
    
    - name: Check imports
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import api_server; print('api_server imported successfully')"
        python -c "import dynamic_pricing_model; print('dynamic_pricing_model imported successfully')"
        python -c "import sentiment_analysis; print('sentiment_analysis imported successfully')"

  # Job 5: Docker Build (if Dockerfile exists)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Check for Dockerfile
      id: dockerfile_check
      run: |
        if [ -f Dockerfile ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image
      if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
      run: |
        docker build -t dynamic-pricing-system:latest .
    
    - name: Test Docker image
      if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
      run: |
        docker images
      continue-on-error: true

  # Job 6: Deployment (placeholder for actual deployment)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app-url.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deployment notification
      run: |
        echo "üöÄ Deployment triggered for Dynamic Pricing System"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
    
    # Add actual deployment steps here based on your hosting platform:
    # - AWS: aws-actions/configure-aws-credentials + deployment commands
    # - Heroku: akhileshns/heroku-deploy@v3.12.12
    # - Azure: azure/webapps-deploy@v2
    # - Google Cloud: google-github-actions/deploy-cloudrun@v1
    
    - name: Deployment placeholder
      run: |
        echo "Configure actual deployment steps based on your hosting platform"
        echo "For now, this is a placeholder to demonstrate the workflow structure"

  # Job 7: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    
    steps:
    - name: Check workflow status
      run: |
        echo "Workflow completed"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
    
    - name: Success notification
      if: needs.build.result == 'success'
      run: |
        echo "‚úÖ All checks passed successfully!"
    
    - name: Failure notification
      if: needs.build.result != 'success'
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        exit 1
